import { ToRefs } from 'vue-demi';
import { DefaultError, MutateFunction, MutationObserverResult, MutationObserverOptions } from '@tanstack/query-core';
import { MaybeRefDeep, DistributiveOmit } from './types.cjs';
import { Q as QueryClient } from './queryClient-90CGXiO5.cjs';

type MutationResult<TData, TError, TVariables, TContext> = DistributiveOmit<MutationObserverResult<TData, TError, TVariables, TContext>, 'mutate' | 'reset'>;
type UseMutationOptionsBase<TData, TError, TVariables, TContext> = MutationObserverOptions<TData, TError, TVariables, TContext> & {
    shallow?: boolean;
};
type UseMutationOptions<TData = unknown, TError = DefaultError, TVariables = void, TContext = unknown> = MaybeRefDeep<UseMutationOptionsBase<TData, TError, TVariables, TContext>>;
type MutateSyncFunction<TData = unknown, TError = DefaultError, TVariables = void, TContext = unknown> = (...options: Parameters<MutateFunction<TData, TError, TVariables, TContext>>) => void;
type UseMutationReturnType<TData, TError, TVariables, TContext, TResult = MutationResult<TData, TError, TVariables, TContext>> = ToRefs<Readonly<TResult>> & {
    mutate: MutateSyncFunction<TData, TError, TVariables, TContext>;
    mutateAsync: MutateFunction<TData, TError, TVariables, TContext>;
    reset: MutationObserverResult<TData, TError, TVariables, TContext>['reset'];
};
declare function useMutation<TData = unknown, TError = DefaultError, TVariables = void, TContext = unknown>(mutationOptions: MaybeRefDeep<UseMutationOptionsBase<TData, TError, TVariables, TContext>>, queryClient?: QueryClient): UseMutationReturnType<TData, TError, TVariables, TContext>;

export { type UseMutationOptions, type UseMutationReturnType, useMutation };
