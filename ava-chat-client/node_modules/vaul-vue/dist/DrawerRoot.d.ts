import { type DrawerRootProps } from './controls';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<DrawerRootProps>, {
    open: undefined;
    defaultOpen: undefined;
    fixed: undefined;
    dismissible: boolean;
    activeSnapPoint: undefined;
    snapPoints: undefined;
    shouldScaleBackground: undefined;
    closeThreshold: number;
    fadeFromIndex: undefined;
    nested: boolean;
    modal: boolean;
    scrollLockTimeout: number;
    direction: string;
}>, {
    open: import("vue").Ref<boolean>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    drag: (percentageDragged: number) => void;
    release: (open: boolean) => void;
    close: () => void;
    "update:open": (open: boolean) => void;
    "update:activeSnapPoint": (val: string | number) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
    activeSnapPoint?: string | number | null | undefined;
    closeThreshold?: number | undefined;
    shouldScaleBackground?: boolean | undefined;
    scrollLockTimeout?: number | undefined;
    fixed?: boolean | undefined;
    dismissible?: boolean | undefined;
    modal?: boolean | undefined;
    open?: boolean | undefined;
    defaultOpen?: boolean | undefined;
    nested?: boolean | undefined;
    direction?: import("./types").DrawerDirection | undefined;
} & import("./controls").WithFadeFromProps>, {
    open: undefined;
    defaultOpen: undefined;
    fixed: undefined;
    dismissible: boolean;
    activeSnapPoint: undefined;
    snapPoints: undefined;
    shouldScaleBackground: undefined;
    closeThreshold: number;
    fadeFromIndex: undefined;
    nested: boolean;
    modal: boolean;
    scrollLockTimeout: number;
    direction: string;
}>> | import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
    activeSnapPoint?: string | number | null | undefined;
    closeThreshold?: number | undefined;
    shouldScaleBackground?: boolean | undefined;
    scrollLockTimeout?: number | undefined;
    fixed?: boolean | undefined;
    dismissible?: boolean | undefined;
    modal?: boolean | undefined;
    open?: boolean | undefined;
    defaultOpen?: boolean | undefined;
    nested?: boolean | undefined;
    direction?: import("./types").DrawerDirection | undefined;
} & import("./controls").WithoutFadeFromProps>, {
    open: undefined;
    defaultOpen: undefined;
    fixed: undefined;
    dismissible: boolean;
    activeSnapPoint: undefined;
    snapPoints: undefined;
    shouldScaleBackground: undefined;
    closeThreshold: number;
    fadeFromIndex: undefined;
    nested: boolean;
    modal: boolean;
    scrollLockTimeout: number;
    direction: string;
}>>> & {
    onDrag?: ((percentageDragged: number) => any) | undefined;
    onRelease?: ((open: boolean) => any) | undefined;
    onClose?: (() => any) | undefined;
    "onUpdate:open"?: ((open: boolean) => any) | undefined;
    "onUpdate:activeSnapPoint"?: ((val: string | number) => any) | undefined;
}, {
    open: boolean;
    modal: boolean;
    dismissible: boolean;
    direction: import("./types").DrawerDirection;
    snapPoints: (string | number)[];
    activeSnapPoint: string | number | null;
    fadeFromIndex: number;
    nested: boolean;
    fixed: boolean;
    shouldScaleBackground: boolean;
    scrollLockTimeout: number;
    closeThreshold: number;
    defaultOpen: boolean;
} | {
    open: boolean;
    modal: boolean;
    dismissible: boolean;
    direction: import("./types").DrawerDirection;
    snapPoints: (string | number)[];
    activeSnapPoint: string | number | null;
    fadeFromIndex: never;
    nested: boolean;
    fixed: boolean;
    shouldScaleBackground: boolean;
    scrollLockTimeout: number;
    closeThreshold: number;
    defaultOpen: boolean;
}, {}>, Readonly<{
    default: (props: {
        open: boolean;
    }) => any;
}> & {
    default: (props: {
        open: boolean;
    }) => any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
