import { type ComponentPublicInstance, type Ref } from 'vue';
import type { DrawerDirection } from './types';
interface useSnapPointsProps {
    activeSnapPoint: Ref<number | string | null | undefined>;
    snapPoints: Ref<(number | string)[] | undefined>;
    fadeFromIndex: Ref<number | undefined>;
    drawerRef: Ref<ComponentPublicInstance | null>;
    overlayRef: Ref<ComponentPublicInstance | null>;
    onSnapPointChange: (activeSnapPointIndex: number, snapPointsOffset: number[]) => void;
    direction: Ref<DrawerDirection>;
}
export declare function useSnapPoints({ activeSnapPoint, snapPoints, drawerRef, overlayRef, fadeFromIndex, onSnapPointChange, direction, }: useSnapPointsProps): {
    isLastSnapPoint: import("vue").ComputedRef<boolean | null>;
    shouldFade: import("vue").ComputedRef<boolean>;
    getPercentageDragged: (absDraggedDistance: number, isDraggingDown: boolean) => number | null;
    activeSnapPointIndex: import("vue").ComputedRef<number | null>;
    onRelease: ({ draggedDistance, closeDrawer, velocity, dismissible, }: {
        draggedDistance: number;
        closeDrawer: () => void;
        velocity: number;
        dismissible: boolean;
    }) => void;
    onDrag: ({ draggedDistance }: {
        draggedDistance: number;
    }) => void;
    snapPointsOffset: import("vue").ComputedRef<number[]>;
};
export {};
