import type { ComponentPublicInstance, Ref } from 'vue';
import type { DrawerRootContext } from './context';
import type { DrawerDirection } from './types';
export declare const CLOSE_THRESHOLD = 0.25;
export declare const SCROLL_LOCK_TIMEOUT = 100;
export declare const BORDER_RADIUS = 8;
export declare const NESTED_DISPLACEMENT = 16;
export declare const WINDOW_TOP_OFFSET = 26;
export declare const DRAG_CLASS = "vaul-dragging";
export interface WithFadeFromProps {
    snapPoints: (number | string)[];
    fadeFromIndex: number;
}
export interface WithoutFadeFromProps {
    snapPoints?: (number | string)[];
    fadeFromIndex?: never;
}
export type DrawerRootProps = {
    activeSnapPoint?: number | string | null;
    closeThreshold?: number;
    shouldScaleBackground?: boolean;
    scrollLockTimeout?: number;
    fixed?: boolean;
    dismissible?: boolean;
    modal?: boolean;
    open?: boolean;
    defaultOpen?: boolean;
    nested?: boolean;
    direction?: DrawerDirection;
} & (WithFadeFromProps | WithoutFadeFromProps);
export interface UseDrawerProps {
    open: Ref<boolean>;
    snapPoints: Ref<(number | string)[] | undefined>;
    dismissible: Ref<boolean>;
    nested: Ref<boolean>;
    fixed: Ref<boolean | undefined>;
    modal: Ref<boolean>;
    shouldScaleBackground: Ref<boolean | undefined>;
    activeSnapPoint: Ref<number | string | null | undefined>;
    fadeFromIndex: Ref<number | undefined>;
    closeThreshold: Ref<number>;
    scrollLockTimeout: Ref<number>;
    direction: Ref<DrawerDirection>;
}
export interface DrawerRootEmits {
    (e: 'drag', percentageDragged: number): void;
    (e: 'release', open: boolean): void;
    (e: 'close'): void;
    (e: 'update:open', open: boolean): void;
    (e: 'update:activeSnapPoint', val: string | number): void;
}
export interface DialogEmitHandlers {
    emitDrag: (percentageDragged: number) => void;
    emitRelease: (open: boolean) => void;
    emitClose: () => void;
    emitOpenChange: (open: boolean) => void;
}
export interface Drawer {
    isOpen: Ref<boolean>;
    hasBeenOpened: Ref<boolean>;
    isVisible: Ref<boolean>;
    drawerRef: Ref<ComponentPublicInstance | null>;
    overlayRef: Ref<ComponentPublicInstance | null>;
    isDragging: Ref<boolean>;
    dragStartTime: Ref<Date>;
    isAllowedToDrag: Ref<boolean>;
    snapPoints: Ref<(number | string)[] | undefined>;
    activeSnapPoint: Ref<number | string | null>;
    pointerStart: Ref<number>;
    dismissible: Ref<boolean>;
    drawerHeightRef: Ref<number>;
    snapPointsOffset: Ref<number[]>;
    onPress: (event: PointerEvent) => void;
    onDrag: (event: PointerEvent) => void;
    onRelease: (event: PointerEvent) => void;
    closeDrawer: () => void;
}
export declare function useDrawer(props: UseDrawerProps & DialogEmitHandlers): DrawerRootContext;
